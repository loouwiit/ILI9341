#pragma once

#include "tetris.hpp"

using Color = App::LCD::Color;

using BlockType = AppTetris::BlockType;
constexpr static unsigned char BlockTypeCount = AppTetris::BlockTypeCount;

constexpr static Vector2us MapSize = { 10,24 };
constexpr static Vector2us RealMapSize = { 10,20 };

constexpr static Color BlockColor[9] =
{
	{0xFF >> 2,0x00 >> 2,0x00 >> 2}, // 红 0
	{0xFF >> 2,0x99 >> 2,0x00 >> 2}, // 橙 1
	{0xFF >> 2,0xFF >> 2,0x00 >> 2}, // 黄 2
	{0x00 >> 2,0xFF >> 2,0x00 >> 2}, // 绿 3
	{0x00 >> 2,0xFF >> 2,0xFF >> 2}, // 青 4
	{0x00 >> 2,0x00 >> 2,0xFF >> 2}, // 蓝 5
	{0xFF >> 2,0x00 >> 2,0xCC >> 2}, // 紫 6
	{0xCC >> 2,0xCC >> 2,0xCC >> 2}, // 灰 7
	{0x33 >> 2,0x33 >> 2,0x33 >> 2}, // 黑 8
};

constexpr static Color WillBlockColor[7] =
{
	{0xFF >> 3,0x33 >> 3,0x33 >> 3}, // 红 0
	{0xFF >> 3,0x99 >> 3,0x33 >> 3}, // 橙 1
	{0xFF >> 3,0xFF >> 3,0x33 >> 3}, // 黄 2
	{0x33 >> 3,0xFF >> 3,0x33 >> 3}, // 绿 3
	{0x33 >> 3,0xFF >> 3,0xFF >> 3}, // 青 4
	{0x33 >> 3,0x33 >> 3,0xFF >> 3}, // 蓝 5
	{0xFF >> 3,0x33 >> 3,0xCC >> 3}, // 紫 6
};

constexpr static auto NormalColorCount = BlockTypeCount;
constexpr static auto GrayColor = BlockColor[7];
constexpr static auto BlackColor = BlockColor[8];
constexpr static auto BackGroundColor = Color{ 0,0,0 };

constexpr static unsigned char BlockPosition[BlockTypeCount][4] = { {5,3,2,0},{1,3,5,4},{2,3,5,4},{1,3,2,4},{1,3,5,7},{5,3,1,0},{1,3,2,5} };

enum class Rotation { U, R, D, L };
constexpr static unsigned char BlockRotatePositionNumber = 6;
constexpr static Vector2s BlockConstantOffset[BlockTypeCount][4] =
{
	//	U		R		D		L
	{ { 0, 0}, { 0, 0}, { 0, 0}, { 0, 0} }, //Z
	{ { 0, 0}, { 0, 0}, { 0, 0}, { 0, 0} }, //L
	{ { 0, 0}, { 0, 0}, { 0, 0}, { 0, 0} }, //O //不会被访问
	{ { 0, 0}, { 0, 0}, { 0, 0}, { 0, 0} }, //S
	{ { 0, 0}, { 0,+1}, {+1,+1}, {+1, 0} }, //I //唯一有用的
	{ { 0, 0}, { 0, 0}, { 0, 0}, { 0, 0} }, //J
	{ { 0, 0}, { 0, 0}, { 0, 0}, { 0, 0} }, //T
};

enum class BlockRotatePositionType
{
	UR = 0,
	RU = 1,
	RD = 1,
	DR = 0,
	DL = 2,
	LD = 3,
	LU = 3,
	UL = 2,
	UD = 12,
	DU = 13,
	LR = 14,
	RL = 15,

	IUR = 4,
	IRU = 5,
	IRD = 6,
	IDR = 7,
	IDL = 8,
	ILD = 9,
	ILU = 10,
	IUL = 11,
	IUD = 12,
	IDU = 13,
	ILR = 14,
	IRL = 15,
};

constexpr static Vector2s BlockRotatePosition[16][6] = {
	{{0, 0}, {0, -1}, {-1, +1}, {0, -2}, {-1, -2}, { 0, 0}},
	{{0, 0}, {+1, 0}, {+1, -1}, {0, +2}, {+1, +2}, { 0, 0}},
	{{0, 0}, {+1, 0}, {+1, +1}, {0, -2}, {+1, -2}, { 0, 0}},
	{{0, 0}, {-1, 0}, {-1, -1}, {0, +2}, {-1, +2}, { 0, 0}},

	{{0, 0}, {+2, 0}, {-1, 0}, {+2, +1}, {-1, -2}, { 0, 0}},
	{{0, 0}, {+1, 0}, {-2, 0}, {+1, +2}, {-2, -1}, { 0, 0}},
	{{0, 0}, {+1, 0}, {-2, 0}, {+1, -2}, {+2, +1}, { 0, 0}},
	{{0, 0}, {-1, 0}, {+2, 0}, {+2, -1}, {-1, +2}, { 0, 0}},
	{{0, 0}, {+1, 0}, {-2, 0}, {-2, -1}, {+1, +2}, { 0, 0}},
	{{0, 0}, {-1, 0}, {+2, 0}, {-1, -2}, {+2, +1}, { 0, 0}},
	{{0, 0}, {-1, 0}, {+2, 0}, {-1, +2}, {+2, -1}, { 0, 0}},
	{{0, 0}, {-2, 0}, {+1, 0}, {-2, +1}, {+1, -2}, { 0, 0}},

	{{0, 0}, {0, +1}, {+1, +1}, {-1, +1}, {+1, 0}, {-1, 0}},
	{{0, 0}, {0, -1}, {-1, -1}, {+1, -1}, {-1, 0}, {+1, 0}},
	{{0, 0}, {+1, 0}, { 0, -1}, {+1, -1}, {0, +1}, {+1,+1}},
	{{0, 0}, {-1, 0}, { 0, -1}, {-1, -1}, {0, +1}, {-1,+1}},
};
/*
Normol
0->R	(0, 0)	(-1, 0)	(-1,+1)	( 0,-2)	(-1,-2)
R->0	(0, 0)	(+1, 0)	(+1,-1)	( 0,+2)	(+1,+2)
R->2	(0, 0)	(+1, 0)	(+1,-1)	( 0,+2)	(+1,+2)
2->R	(0, 0)	(-1, 0)	(-1,+1)	( 0,-2)	(-1,-2)
2->L	(0, 0)	(+1, 0)	(+1,+1)	( 0,-2)	(+1,-2)
L->2	(0, 0)	(-1, 0)	(-1,-1)	( 0,+2)	(-1,+2)
L->0	(0, 0)	(-1, 0)	(-1,-1)	( 0,+2)	(-1,+2)
0->L	(0, 0)	(+1, 0)	(+1,+1)	( 0,-2)	(+1,-2)

I+
U->R	(0, 0)	(+2, 0)	(-1, 0)	(+2,+1)	(-1,-2)
R->U	(0, 0)	(+1, 0)	(-2, 0)	(+1,+2)	(-2,-1)
R->D	(0, 0)	(+1, 0)	(-2, 0)	(+1,-2)	(+2,+1)
D->R	(0, 0)	(-1, 0)	(+2, 0)	(+2,-1)	(-1,+2)
D->L	(0, 0)	(+1, 0)	(-2, 0)	(-2,-1)	(+1,+2)
L->D	(0, 0)	(-1, 0)	(+2, 0)	(-1,-2)	(+2,+1)
L->U	(0, 0)	(-1, 0)	(+2, 0)	(-1,+2)	(+2,-1)
U->L	(0, 0)	(-2, 0)	(+1, 0)	(-2,+1)	(+1,-2)

180
U->D	(0, 0)	(0 ,+1)	(+1,+1)	(-1,+1)	(+1, 0)	(-1, 0)
D->U	(0, 0)	(0 ,-1)	(-1,-1)	(+1,-1)	(-1, 0)	(+1, 0)
R->L	(0, 0)	(+1, 0)	(0 ,-1)	(+1,-1)	(0 ,+1)	(+1,+1)
L->R	(0, 0)	(-1, 0)	(0 ,-1)	(-1,-1)	(0 ,+1)	(-1,+1)
*/
